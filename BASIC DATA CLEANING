--Remove duplicate rows. 
--This query removes duplicate rows from the Employee table by keeping only the row with the minimum row ID for each group of duplicate record

DELETE FROM Employee
WHERE rowid NOT IN (
    SELECT MIN(rowid)
    FROM Employee
    GROUP BY Education, JoiningYear, City, PaymentTier, Age, Gender, EverBenched, ExperienceInCurrentDomain, LeaveOrNot
);

-- Find rows with missing values
-- This query retrieves all rows from the Employee table that have any missing values in any of the specified columns.

SELECT *
FROM Employee
WHERE Education IS NULL
   OR JoiningYear IS NULL
   OR City IS NULL
   OR PaymentTier IS NULL
   OR Age IS NULL
   OR Gender IS NULL
   OR EverBenched IS NULL
   OR ExperienceInCurrentDomain IS NULL
   OR LeaveOrNot IS NULL;

-- Remove rows with missing values
-- This query deletes all rows from the Employee table that have any missing values in any of the specified columns.

DELETE FROM Employee
WHERE Education IS NULL
   OR JoiningYear IS NULL
   OR City IS NULL
   OR PaymentTier IS NULL
   OR Age IS NULL
   OR Gender IS NULL
   OR EverBenched IS NULL
   OR ExperienceInCurrentDomain IS NULL
   OR LeaveOrNot IS NULL;

-- Replace missing values with a default value
-- These queries replace missing values in each specified column with a default value, such as 'Unknown' for text columns or 0 for numeric columns.

UPDATE Employee
SET Education = 'Unknown'
WHERE Education IS NULL;

UPDATE Employee
SET JoiningYear = 0
WHERE JoiningYear IS NULL;

UPDATE Employee
SET City = 'Unknown'
WHERE City IS NULL;

UPDATE Employee
SET PaymentTier = 1
WHERE PaymentTier IS NULL;

UPDATE Employee
SET Age = 0
WHERE Age IS NULL;

UPDATE Employee
SET Gender = 'Unknown'
WHERE Gender IS NULL;

UPDATE Employee
SET EverBenched = 'No'
WHERE EverBenched IS NULL;

UPDATE Employee
SET ExperienceInCurrentDomain = 0
WHERE ExperienceInCurrentDomain IS NULL;

UPDATE Employee
SET LeaveOrNot = 0
WHERE LeaveOrNot IS NULL;

-- Standardize text data (e.g., make all city names lowercase)
-- This query converts all values in the City column to lowercase to ensure consistency in text data.

UPDATE Employee
SET City = LOWER(City);

-- Remove leading and trailing spaces from text data
-- This query removes any leading or trailing spaces from the specified text columns to ensure data is clean and uniform.

UPDATE Employee
SET City = TRIM(City),
    Education = TRIM(Education),
    Gender = TRIM(Gender),
    EverBenched = TRIM(EverBenched);

-- Remove non-numeric characters from a numeric column (e.g., Age)
-- This query removes any non-numeric characters from the Age column to ensure that it contains only numeric values.

UPDATE Employee
SET Age = REGEXP_REPLACE(Age, '[^0-9]', '');

-- Convert data types (e.g., convert Age to INTEGER)
-- This query changes the data type of the Age column to INTEGER to ensure that it is stored as a numeric value in the database.

ALTER TABLE Employee
ALTER COLUMN Age SET DATA TYPE INTEGER;
